
--  Create a view for current employee profile
CREATE OR REPLACE VIEW V_EMPLOYEE_PROFILE AS
SELECT 
    e.EMPLOYEE_ID,
    e.FULL_NAME,
    e.EMAIL,
    h.GRADE,
    h.DISTRICT_UNIT,
    h.LINE_MANAGER,
    h.START_DATE,
    h.END_DATE
FROM TARGET_DIM_EMPLOYEE e
JOIN (
    SELECT HISTORY_ID, EMPLOYEE_ID, GRADE, DISTRICT_UNIT, LINE_MANAGER, START_DATE, END_DATE
    FROM (
        SELECT * FROM TARGET_DIM_EMPLOYEE_HISTORY
        ORDER BY EMPLOYEE_ID, START_DATE DESC
    )
    WHERE END_DATE IS NULL
) h ON e.EMPLOYEE_ID = h.EMPLOYEE_ID;

--see view
select * from V_EMPLOYEE_PROFILE;


-- View: V_EMPLOYEE_AT_DATE
-- Maps each employee to their historical attributes at a given activity date

CREATE OR REPLACE VIEW V_EMPLOYEE_AT_DATE AS
SELECT 
    f.FACT_ID,
    e.EMPLOYEE_ID,
    e.FULL_NAME,
    f.DATE_ID,
    d.CALENDAR_DATE,
    h.GRADE,
    h.DISCIPLINE,
    h.LINE_MANAGER,
    h.DISTRICT_UNIT,
    f.ACTIVITY_TYPE,
    f.DURATION_HOURS,
    f.START_TIME,
    f.END_TIME,
    f.STATUS
FROM TARGET_FACT_EMPLOYEE_ACTIVITY f
JOIN TARGET_DIM_EMPLOYEE e ON f.EMPLOYEE_ID = e.EMPLOYEE_ID
JOIN TARGET_DIM_DATE d ON f.DATE_ID = d.DATE_ID
JOIN TARGET_DIM_EMPLOYEE_HISTORY h
  ON h.EMPLOYEE_ID = f.EMPLOYEE_ID
  AND d.CALENDAR_DATE BETWEEN h.START_DATE AND NVL(h.END_DATE, d.CALENDAR_DATE);

--see view
select * from v_employee_at_date;

-- View: V_EMPLOYEE_MONTHLY_REPORT
-- Aggregates work, training, absence hours with attributes for each month

CREATE OR REPLACE VIEW V_EMPLOYEE_MONTHLY_REPORT AS
WITH DISTINCT_ABSENCES AS (
    SELECT 
        e.EMPLOYEE_ID,
        d.YEAR,
        d.MONTH,
        f.ACTIVITY_TYPE
    FROM TARGET_FACT_EMPLOYEE_ACTIVITY f
    JOIN TARGET_DIM_EMPLOYEE e ON f.EMPLOYEE_ID = e.EMPLOYEE_ID
    JOIN TARGET_DIM_DATE d ON f.DATE_ID = d.DATE_ID
    WHERE f.ACTIVITY_TYPE IN ('Exam', 'Personal')
    GROUP BY e.EMPLOYEE_ID, d.YEAR, d.MONTH, f.ACTIVITY_TYPE
)
SELECT 
    e.EMPLOYEE_ID,
    e.FULL_NAME,
    d.YEAR,
    d.MONTH,
    
    -- Work-related hours
    SUM(CASE WHEN f.ACTIVITY_TYPE = 'Work' THEN f.DURATION_HOURS ELSE 0 END) AS WORK_HOURS,

    -- Training hours (informational only)
    SUM(CASE WHEN f.ACTIVITY_TYPE = 'Training' THEN f.DURATION_HOURS ELSE 0 END) AS TRAINING_HOURS,

    -- Absences (true impact)
    SUM(CASE WHEN f.ACTIVITY_TYPE IN ('Exam', 'Personal') THEN f.DURATION_HOURS ELSE 0 END) AS ABSENCE_HOURS,

    -- Adjusted total hours (work only - absences counted as missed time)
    SUM(CASE WHEN f.ACTIVITY_TYPE = 'Work' THEN f.DURATION_HOURS ELSE 0 END)
    - SUM(CASE WHEN f.ACTIVITY_TYPE IN ('Exam', 'Personal') THEN f.DURATION_HOURS ELSE 0 END)
    AS TOTAL_EFFECTIVE_HOURS,

    -- Monthly status based on effective hours (excluding training)
    CASE 
        WHEN SUM(CASE WHEN f.ACTIVITY_TYPE = 'Work' THEN f.DURATION_HOURS ELSE 0 END)
           - SUM(CASE WHEN f.ACTIVITY_TYPE IN ('Exam', 'Personal') THEN f.DURATION_HOURS ELSE 0 END)
           >= (COUNT(DISTINCT d.CALENDAR_DATE) * 8) THEN 'OK'
        ELSE 'MISSING HOURS'
    END AS MONTH_STATUS,

    -- Deduplicated absence types
    (SELECT LISTAGG(ACTIVITY_TYPE, ', ') 
        WITHIN GROUP (ORDER BY ACTIVITY_TYPE)
     FROM DISTINCT_ABSENCES da
     WHERE da.EMPLOYEE_ID = e.EMPLOYEE_ID 
       AND da.YEAR = d.YEAR 
       AND da.MONTH = d.MONTH
    ) AS ABSENCE_TYPES,

    -- Final Grade & Historical Attributes at latest date
    MAX(h.GRADE) KEEP (DENSE_RANK LAST ORDER BY h.START_DATE) AS FINAL_GRADE,
    MAX(h.DISCIPLINE) KEEP (DENSE_RANK LAST ORDER BY h.START_DATE) AS DISCIPLINE,
    MAX(h.LINE_MANAGER) KEEP (DENSE_RANK LAST ORDER BY h.START_DATE) AS LINE_MANAGER,
    MAX(h.DISTRICT_UNIT) KEEP (DENSE_RANK LAST ORDER BY h.START_DATE) AS DISTRICT_UNIT

FROM TARGET_FACT_EMPLOYEE_ACTIVITY f
JOIN TARGET_DIM_EMPLOYEE e ON f.EMPLOYEE_ID = e.EMPLOYEE_ID
JOIN TARGET_DIM_DATE d ON f.DATE_ID = d.DATE_ID
JOIN TARGET_DIM_EMPLOYEE_HISTORY h
  ON h.EMPLOYEE_ID = f.EMPLOYEE_ID
  AND d.CALENDAR_DATE BETWEEN h.START_DATE AND NVL(h.END_DATE, d.CALENDAR_DATE)

GROUP BY e.EMPLOYEE_ID, e.FULL_NAME, d.YEAR, d.MONTH;


select * from v_employee_monthly_report;
